diff --git "a/git\345\255\246\344\271\240.md" "b/git\345\255\246\344\271\240.md"
index 08e0016..392d154 100644
--- "a/git\345\255\246\344\271\240.md"
+++ "b/git\345\255\246\344\271\240.md"
@@ -1,30 +1,75 @@
-## 初始化一个本地仓库
+这是git操作的基本流程
+![](GitHub.webp)
+
+> Repository,index,workspace，都存储在本地
+
+## git init-初始化一个本地仓库
 ```bash
-$ git init #初始化了一个本地仓库，建立了一个.git文件夹，被称为附属于该仓库的工作树
+$ git init #初始化了一个本地仓库，建立了一个.git文件夹
 ```
-## 查看仓库状态
+这是git init后当前文件夹的目录结构图，将仓库，暂存区和工作树（项目本地目录）都确定下来了。
+```bash
+githublearning
+    ├── .git
+    │   ├── branches
+    │   ├── COMMIT_EDITMSG
+    │   ├── config
+    │   ├── description
+    │   ├── HEAD
+    │   ├── hooks
+    │   ├── index
+    │   ├── info
+    │   ├── logs
+    │   ├── objects
+    │   └── refs
+    ├── git学习.md
+    ├── GitHub.webp
+    └── README.md
+```
+- **工作树**：.git所在的目录，就是workplace。本例中就是githublearning文件夹，该文件夹内的内容就是需要版本控制的文件
+
+- **暂存区**：.git下的index的文件
+
+- **仓库**：.git文件夹就是仓库
+
+  ​			**`HEAD`**：这是一个指向当前活动分支的引用，它告诉 Git 你当前处在哪个分支上。
+
+  ​		**`config`**：存储仓库级别的配置信息，如用户信息、远程仓库地址等。
+
+  ​		**`refs`**：存储分支（`refs/heads/`）、标签（`refs/tags/`）等引用。每个分支和标签都指向特定的提交对象。
+
+  ​		**`objects`**：存储 Git 对象（提交、树、文件 blob）的数据库。Git 是通过哈希（SHA-1 值）来存储每个对象的，确保了内容的唯一性和完整性。
+
+  ​		**`index`**：即暂存区，用于存储那些你已经用 `git add` 命令暂存的更改，准备提交时从这里取数据。
+
+  ​		**`logs`**：保存引用的历史，记录了每个分支或引用的变更日志，便于追踪。
 ```bash
 $ git status #记录着当前处于master还是branch分支，有无需要commit的文件等
+
+
 ##以下是状态
 位于分支 master
 要提交的变更：
   （使用 "git restore --staged <文件>..." 以取消暂存）
         修改：     "git\345\255\246\344\271\240.md"
 ```
-## 上传文件到本地仓库
+## gid add-向暂存区添加文件
 ```bash
 git add xxx.cpp #上传一个xxx.cpp文件
 git add -A #上传当前文件夹下的所有文件
 git add . #同上
 ```
-## 提交到github仓库
+## git commit-提交到本地仓库
 ```bash
 $ git commit -m “本次提交的备注” #上传到master分支，并打上备注
 $ gitgit commit #可以直接commit，之后再详细编辑备注
 ```
-## 查看提交日志
+## git log-查看提交日志
+查看全部日志
 ```bash
 $ git log
+
+
 ##以下是日志内容
 commit b3f611dafea403f51c52a04491a23e1e4e059190 (HEAD -> master)
 Author: lyroom <codingfish@outlook.com>
@@ -40,8 +85,16 @@ Date:   Sat Oct 12 13:04:45 2024 +0800
 
     第一次提交
 
-##也可以简短一行的输出每次提交的修改
+```
+> 查看日志常用快捷键：和man操作，less操作基本一样
+f：往后翻一页
+b：往前翻一页
+
+也可以简短一行的输出每次提交的修改
+```bash
 $ git log --pretty=short
+
+
 ##以下是日志内容
 commit b3f611dafea403f51c52a04491a23e1e4e059190 (HEAD -> master)
 Author: lyroom <codingfish@outlook.com>
@@ -54,8 +107,35 @@ Author: lyroom <codingfish@outlook.com>
 Date:   Sat Oct 12 13:04:45 2024 +0800
 
     第一次提交
+
 ```
+也可以查看文件前后修改的对比
+```bash
+$ git log -p README.md
 
-查看日志常用快捷键：和man操作，less操作基本一样
-f：往后翻一页
-b：往前翻一页
\ No newline at end of file
+
+##以下是对比内容
+Author: lyroom <codingfish@outlook.com>
+Date:   Sat Oct 12 15:33:31 2024 +0800
+
+    这是第七次修改
+
+diff --git a/README.md b/README.md
+index 5f9894b..ffbea86 100644
+--- a/README.md
++++ b/README.md
+@@ -1 +1,2 @@
+ 第六次修改
++第七次修改
+```
+## git diff-查看更改前后的区别
+
+git diff命令可以查看工作树、暂存区、仓库最新提交之间的差别。
+
+### 查看工作树和暂存区的区别
+```bash
+$ git diff
+
+
+
+```
